import json
from collections import defaultdict
import os

comparisonData_json = "ComparisonData.json"
averagedData_json="AveragedData.json"
def json_data(results, doc_numbers_to_titles, modelName):

    try:
        if os.path.exists(comparisonData_json):
            with open(comparisonData_json, mode="r") as json_file:
                existing_data = json.load(json_file)
        else:
            existing_data = defaultdict(dict)
    except json.JSONDecodeError:
        existing_data = defaultdict(dict)

    for doc_number, similarity_score in results:
        if doc_number in doc_numbers_to_titles:
            doc_number_str = str(doc_number)
            if doc_number_str in existing_data:
                existing_data[doc_number_str]["scores"][modelName] = similarity_score
            else:
                existing_data[doc_number_str] = {
                    "number": doc_number,
                    "title": doc_numbers_to_titles.get(doc_number, ""),
                    "scores": {modelName: similarity_score}
                }
        else:
            print(f"Document with number {doc_number} does not exist in the data.")

    # Write updated data back to JSON
    with open(comparisonData_json, mode="w") as json_file:
        json.dump(existing_data, json_file, indent=4)

    # cannot return the data at once as scores generated by new models will keep getting appended to the scores prevoiusly generated by the previous models

    
    print(f"{modelName} model data stored to json!")

def calculate_average_scores():
    with open(comparisonData_json, 'r') as file:
        json_data = json.load(file)
    
    for key, value in json_data.items():
        scores = value["scores"]
        average = sum(scores.values()) / len(scores)
        value["average"] = round(average, 3)

    # Sort by average value in descending order
    sorted_data = dict(sorted(json_data.items(), key=lambda x: x[1]["average"], reverse=True))

    # Add rank attribute based on sorted order
    rank = 1
    for key, value in sorted_data.items():
        value["rank"] = rank
        rank += 1
    
    with open(averagedData_json, mode="w") as json_file:
        json.dump(sorted_data, json_file, indent=4)
    
    return sorted_data


